fn main() {
    let mut s = "// WARNING: This file was generated automatically using gen_swizzle.rs. Don't modify
    
use crate::vec::{X, Y, Z, W, PolyVec2, PolyVec3, PolyVec4};

".to_owned();

    let comps = ['x', 'y', 'z', 'w'];
    s.push_str("// ---------- 2-Component Swizzle ----------\n\n");
    for a in comps {
        for b in comps {
            gen_swizzle(&mut s, &[a, b], "PolyVec2");
        }
    }
    s.push_str("\n\n// ---------- 3-Component Swizzle ----------\n\n");
    for a in comps {
        for b in comps {
            for c in comps {
                gen_swizzle(&mut s, &[a, b, c], "PolyVec3");
            }
        }
    }
    s.push_str("\n\n// ---------- 4-Component Swizzle ----------\n\n");
    for a in comps {
        for b in comps {
            for c in comps {
                for d in comps {
                    gen_swizzle(&mut s, &[a, b, c, d], "PolyVec4");
                }
            }
        }
    }

    use std::io::Write;
    let mut file = std::fs::File::create("./src/swizzle.rs").unwrap();
    file.write_all(s.as_bytes()).unwrap();
}

fn gen_swizzle(s: &mut String, comps: &[char], out: &str) {
    let mut trait_name = "Swizzle".to_owned();
    let comps_str = comps.iter().collect::<String>();
    for c in comps {
        trait_name.push(c.to_uppercase().next().unwrap());
    }
    let mut required_traits = comps
        .iter()
        .map(|c| format!("{}<T>", c.to_uppercase().next().unwrap()))
        .collect::<Vec<String>>();
    required_traits.dedup();
    let required_traits = required_traits.join(" + ");

    let new_args = comps
        .iter()
        .map(|c| format!("*self.{}()", c))
        .collect::<Vec<String>>().join(", ");

    s.push_str(&format!("
pub trait {trait}<T> {{
    fn {comps}(&self) -> {out}<T>;
}}
impl<S, T> {trait}<T> for S where
S: {required},
T: Copy {{
    #[inline(always)]
    fn {comps}(&self) -> {out}<T> {{
        {out}::new({new_args})
    }}
}}
",
        trait = trait_name,
        comps = comps_str,
        required = required_traits,
        new_args = new_args
    ));
}